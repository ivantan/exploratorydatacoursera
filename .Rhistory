coinseq <- paste(coinseq, sample(faces, 1), sep=""); coinseq
coinseq <- paste(coinseq, sample(faces, 1), sep=""); coinseq
coinseq <- paste(coinseq, sample(faces, 1), sep=""); coinseq
coinseq <- paste(coinseq, sample(faces, 1), sep=""); coinseq
coinseq <- paste(coinseq, sample(faces, 1), sep=""); coinseq
coinseq <- paste(coinseq, sample(faces, 1), sep=""); coinseq
coinseq <- paste(coinseq, sample(faces, 1), sep=""); coinseq
coinseq <- paste(coinseq, sample(faces, 1), sep=""); coinseq
coinseq <- ""
faces <- c("H", "T")
# new turn: flips
coinseq <- paste(coinseq, sample(faces, 1), sep=""); coinseq
coinseq <- paste(coinseq, sample(faces, 1), sep=""); coinseq
coinseq <- paste(coinseq, sample(faces, 1), sep=""); coinseq
coinseq <- paste(coinseq, sample(faces, 1), sep=""); coinseq
coinseq <- paste(coinseq, sample(faces, 1), sep=""); coinseq
coinseq <- ""
faces <- c("H", "T")
coinseq <- ""
faces <- c("H", "T")
flipsCoin <- function(){
coinseq <- paste(coinseq, sample(faces, 1), sep=""); coinseq
}
flipsCoin
flipsCoin
flipsCoin()
flipsCoin()
flipsCoin()
flipsCoin()
flipsCoin()
flipsCoin()
coinseq
coinseq
coinseq <- flipsCoin()
coinseq <- flipsCoin()
coinseq
coinseq
coinseq <- flipsCoin()
coinseq <- flipsCoin()
coinseq <- flipsCoin()
coinseq
coinseq
flipsCoin <- function(old){
afterflip <- paste(old, sample(faces, 1), sep="")
return(afterflip)
}
coinseq <- ""
faces <- c("H", "T")
coinseq
result <- flipsCoin(coinseq)
coinseq <- ""
faces <- c("H", "T")
# new turn: flips
flipsCoin <- function(old){
afterflip <- paste(old, sample(faces, 1), sep="")
return(afterflip)
}
coinseq
result <- flipsCoin(coinseq); result
result <- flipsCoin(coinseq); result
result <- flipsCoin(coinseq); result
result <- flipsCoin(coinseq); result
result
coinseq <- ""
faces <- c("H", "T")
# new turn: flips
flipsCoin <- function(old){
afterflip <- paste(old, sample(faces, 1), sep="")
return(afterflip)
}
coinseq
coinseq <- flipsCoin(coinseq); coinseq
coinseq <- flipsCoin(coinseq); coinseq
coinseq <- flipsCoin(coinseq); coinseq
coinseq <- flipsCoin(coinseq); coinseq
coinseq <- flipsCoin(coinseq); coinseq
coinseq <- flipsCoin(coinseq); coinseq
coinseq <- ""
faces <- c("H", "T")
for (i in 1:3){
coinseq <- flipsCoin(coinseq); coinseq
}
coinseq
p1 <- "HHH"
p2 <- "THH"
if (coinseq == p1){
print("p1 wins!")
} else if (coinseq == p2){
print("p2 wins!")
}
p1 <- "HHH"
p2 <- "THH"
coinseq
coinseq[-3:]
coinseq[-3:end]
coinseq[-3:1]
coinseq[3:1]
coinseq[3:]
coinseq[3: ]
coinseq[: ]
coinseq[:]
coinseq
nchar(coinseq)
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
substrRight(coinseq, 2)
coinseq
1
TRUE
TRUE | FALSE
TRUE || FALSE
TRUE & FALSE
(substrRight(coinseq, 3) != p1) |
coinseq <- ""
faces <- c("H", "T")
p1 <- "HHH"
p2 <- "THH"
coinseq <- ""
faces <- c("H", "T")
p1 <- "HHH"
p2 <- "THH"
# flip function
flipsCoin <- function(old){
afterflip <- paste(old, sample(faces, 1), sep="")
return(afterflip)
}
#find last n char function
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
# after first 3 flips - check if p1 or p2 wins
for (i in 1:3){
coinseq <- flipsCoin(coinseq)
}
if (coinseq == p1){
print("p1 wins!")
} else if (coinseq == p2){
print("p2 wins!")
}
# no wins after first 3 flips, moves on to more flips
while (((substrRight(coinseq, 3) != p1) | (substrRight(coinseq, 3) != p2))){
#keep fliping
coinseq <- flipsCoin(coinseq)
}
nchar(coinseq)
coinseq <- ""
faces <- c("H", "T")
p1 <- "HHH"
p2 <- "THH"
# flip function
flipsCoin <- function(old){
afterflip <- paste(old, sample(faces, 1), sep="")
return(afterflip)
}
#find last n char function
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
# after first 3 flips - check if p1 or p2 wins
for (i in 1:3){
coinseq <- flipsCoin(coinseq)
}
if (coinseq == p1){
print("p1 wins!")
} else if (coinseq == p2){
print("p2 wins!")
}
# no wins after first 3 flips, moves on to more flips
while ((substrRight(coinseq, 3) != p1) & (substrRight(coinseq, 3) != p2)){
#keep fliping
coinseq <- flipsCoin(coinseq)
}
#countnumberofflips
nchar(coinseq)
trackflipcounts <- 0
gameplays <- 20
trackgameplays <- matrix(NA, gameplays, 1)
trackgameplays
gameplays <- 20
coinseq <- ""
faces <- c("H", "T")
p1 <- "HHH"
p2 <- "THH"
# flip function
flipsCoin <- function(old){
afterflip <- paste(old, sample(faces, 1), sep="")
return(afterflip)
}
#find last n char function
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
trackgameplays <- matrix(NA, gameplays, 1)
for (i in 1:gameplays){
# after first 3 flips - check if p1 or p2 wins
for (i in 1:3){
coinseq <- flipsCoin(coinseq)
}
if (coinseq == p1){
print("p1 wins!")
} else if (coinseq == p2){
print("p2 wins!")
}
# no wins after first 3 flips, moves on to more flips
while ((substrRight(coinseq, 3) != p1) & (substrRight(coinseq, 3) != p2)){
#keep fliping
coinseq <- flipsCoin(coinseq)
}
#countnumberofflips
trackgameplays[i] <- nchar(coinseq)
}
average(trackgameplays)
trackgameplays
average
ave(trackgameplays)
mean(trackgameplays)
source('~/.active-rstudio-document')
trackgameplays
gameplays <- 20
faces <- c("H", "T")
p1 <- "HHH"
p2 <- "THH"
# flip function
flipsCoin <- function(old){
afterflip <- paste(old, sample(faces, 1), sep="")
return(afterflip)
}
#find last n char function
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
trackgameplays <- matrix(NA, gameplays, 1)
for (j in 1:gameplays){
coinseq <- ""
# after first 3 flips - check if p1 or p2 wins
for (i in 1:3){
coinseq <- flipsCoin(coinseq)
}
if (coinseq == p1){
print("p1 wins!")
} else if (coinseq == p2){
print("p2 wins!")
}
# no wins after first 3 flips, moves on to more flips
while ((substrRight(coinseq, 3) != p1) & (substrRight(coinseq, 3) != p2)){
#keep fliping
coinseq <- flipsCoin(coinseq)
}
#countnumberofflips
trackgameplays[j] <- nchar(coinseq)
}
mean(trackgameplays)
trackgameplays
coinseq <- ""
trackgameplays <- matrix(NA, gameplays, 2)
for (j in 1:gameplays){
coinseq <- ""
# after first 3 flips - check if p1 or p2 wins
for (i in 1:3){
coinseq <- flipsCoin(coinseq)
}
if (coinseq == p1){
print("p1 wins!")
} else if (coinseq == p2){
print("p2 wins!")
}
# no wins after first 3 flips, moves on to more flips
while ((substrRight(coinseq, 3) != p1) & (substrRight(coinseq, 3) != p2)){
#keep fliping
coinseq <- flipsCoin(coinseq)
}
#countnumberofflips
trackgameplays[j,1] <- nchar(coinseq)
trackgameplays[j,2] <- coinseq
}
trackgameplays
trackgameplays <- dataframe(NA, gameplays, 2)
trackgameplays <- data.frame(NA, gameplays, 2)
trackgameplays <- matrix(NA, gameplays, 2)
trackgameplays <- as.data.frame(matrix(NA, gameplays, 2))
trackgameplays
trackgameplays <- as.data.frame(matrix(NA, gameplays, 2))
for (j in 1:gameplays){
coinseq <- ""
# after first 3 flips - check if p1 or p2 wins
for (i in 1:3){
coinseq <- flipsCoin(coinseq)
}
if (coinseq == p1){
print("p1 wins!")
} else if (coinseq == p2){
print("p2 wins!")
}
# no wins after first 3 flips, moves on to more flips
while ((substrRight(coinseq, 3) != p1) & (substrRight(coinseq, 3) != p2)){
#keep fliping
coinseq <- flipsCoin(coinseq)
}
#countnumberofflips
trackgameplays[j,1] <- nchar(coinseq)
trackgameplays[j,2] <- coinseq
}
mean(trackgameplays)
trackgameplays
mean(trackgameplays[,1])
nrow(trackgameplays)
trackgameplays <- as.data.frame(matrix(NA, gameplays, 2))
for (j in 1:gameplays){
coinseq <- ""
# after first 3 flips - check if p1 or p2 wins
for (i in 1:3){
coinseq <- flipsCoin(coinseq)
}
if (coinseq == p1){
print(paste("p1 wins! at flip number", j))
} else if (coinseq == p2){
print(paste("p2 wins! at flip number", j))
}
# no wins after first 3 flips, moves on to more flips
while ((substrRight(coinseq, 3) != p1) & (substrRight(coinseq, 3) != p2)){
#keep fliping
coinseq <- flipsCoin(coinseq)
}
#countnumberofflips
trackgameplays[j,1] <- nchar(coinseq)
trackgameplays[j,2] <- coinseq
}
mean(trackgameplays[,1])
nrow(trackgameplays)
trackgameplays
## My pattern is better than yours
#
# -ivanwj
gameplays <- 2000
faces <- c("H", "T")
p1 <- "HHH"
p2 <- "THH"
# flip function
flipsCoin <- function(old){
afterflip <- paste(old, sample(faces, 1), sep="")
return(afterflip)
}
#find last n char function
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
trackgameplays <- as.data.frame(matrix(NA, gameplays, 2))
for (j in 1:gameplays){
coinseq <- ""
# after first 3 flips - check if p1 or p2 wins
for (i in 1:3){
coinseq <- flipsCoin(coinseq)
}
if (coinseq == p1){
print(paste("p1 wins! at flip number", j))
} else if (coinseq == p2){
print(paste("p2 wins! at flip number", j))
}
# no wins after first 3 flips, moves on to more flips
while ((substrRight(coinseq, 3) != p1) & (substrRight(coinseq, 3) != p2)){
#keep fliping
coinseq <- flipsCoin(coinseq)
}
#countnumberofflips
trackgameplays[j,1] <- nchar(coinseq)
trackgameplays[j,2] <- coinseq
}
mean(trackgameplays[,1])
source('~/.active-rstudio-document')
mean(trackgameplays[,1])
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
trackgameplays
source('~/Documents/personal_codes/penny_game2.R')
trackgameplays
trackgameplays[j,2] <- coinseq
winner <- 0
c(nchar(coinseq), coinseq, winner)
source('~/.active-rstudio-document')
trackgameplays
source('~/.active-rstudio-document')
trackgameplays
sum(trackgameplays[,3] == 2)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/Documents/personal_codes/penny_game2.R')
source('~/Documents/personal_codes/penny_game2.R')
source('~/.active-rstudio-document')
source('~/Documents/personal_codes/penny_game2.R')
fib <- function(n)
{
ifelse(n < 2, n, fib(n - 1) + fib(n - 2))
}
start <- Sys.time()
fib(25)
end <- Sys.time()
end - start
fib <- function(n)
{
ifelse(n < 2, n, fib(n - 1) + fib(n - 2))
}
start <- Sys.time()
fib(25)
end <- Sys.time()
end - start
fib <- function(n)
{
ifelse(n < 2, n, fib(n - 1) + fib(n - 2))
}
start <- Sys.time()
fib(25)
end <- Sys.time()
end - start
fib <- function(n)
{
ifelse(n < 2, n, fib(n - 1) + fib(n - 2))
}
start <- Sys.time()
fib(30)
end <- Sys.time()
end - start
source('~/Documents/johnhopkins/exploratorydatacoursera/plot3.R')
# add legend
legend("topright", lty="solid", col=c("black", "red", "blue"),
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), text.width=4)
plot(data_subset$Datetime, data_subset$Sub_metering_1_num, type="n",
ylab="Energy sub metering", xlab="")
# change the colors of lines and add other metering lines to plot
lines(data_subset$Datetime, data_subset$Sub_metering_1_num, type="l", col="black")
lines(data_subset$Datetime, data_subset$Sub_metering_2_num, type="l", col="red")
lines(data_subset$Datetime, data_subset$Sub_metering_3, type="l", col="blue")
# add legend
legend("topright", lty="solid", col=c("black", "red", "blue"),
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
# add legend
legend("topright", lty="solid", col=c("black", "red", "blue"),
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), text.width=5)
# loads data from txt file
setwd("~/Documents/johnhopkins/")
powerdata <- read.table("household_power_consumption.txt", header=TRUE, sep = ";",
stringsAsFactors = FALSE)
str(powerdata)
# use which() to find row numbers with the date of interest
ofinterest <- which(powerdata$Date == "1/2/2007" | powerdata$Date == "2/2/2007")
data_subset <- powerdata[ofinterest,]
str(data_subset)
# create new column for datetime concatenation of date and time
data_subset$Datetime <- strptime((paste(data_subset$Date, data_subset$Time, sep="-")),
format="%d/%m/%Y-%H:%M:%S")
str(data_subset)
# create columns for new Sub_metering as datatype numeric
data_subset$Sub_metering_1_num <- as.numeric(data_subset$Sub_metering_1)
data_subset$Sub_metering_2_num <- as.numeric(data_subset$Sub_metering_2)
# create plot with no points
plot(data_subset$Datetime, data_subset$Sub_metering_1_num, type="n",
ylab="Energy sub metering", xlab="")
# change the colors of lines and add other metering lines to plot
lines(data_subset$Datetime, data_subset$Sub_metering_1_num, type="l", col="black")
lines(data_subset$Datetime, data_subset$Sub_metering_2_num, type="l", col="red")
lines(data_subset$Datetime, data_subset$Sub_metering_3, type="l", col="blue")
# add legend
legend("topright", lty="solid", col=c("black", "red", "blue"),
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), cex=0.75)
# save to file device as png
setwd("~/Documents/johnhopkins/exploratorydatacoursera/")
dev.copy(png, file="plot3.png", width = 480, height = 480)
dev.off()
locator(1)
locator(1)
locator(1)
# add legend
legend(x = 10, y = 30, lty="solid", col=c("black", "red", "blue"),
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
legend(x = 10, y = 40, lty="solid", col=c("black", "red", "blue"),
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
legend("topright", lty="solid", col=c("black", "red", "blue"),
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
legend("topright", lty="solid", col=c("black", "red", "blue"),
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),
cex = 0.6)
plot(data_subset$Datetime, data_subset$Sub_metering_1_num, type="n",
ylab="Energy sub metering", xlab="")
# change the colors of lines and add other metering lines to plot
lines(data_subset$Datetime, data_subset$Sub_metering_1_num, type="l", col="black")
lines(data_subset$Datetime, data_subset$Sub_metering_2_num, type="l", col="red")
lines(data_subset$Datetime, data_subset$Sub_metering_3, type="l", col="blue")
# add legend
legend("topright", lty="solid", col=c("black", "red", "blue"),
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),
cex = 0.6)
# save to file device as png
setwd("~/Documents/johnhopkins/exploratorydatacoursera/")
dev.copy(png, file="plot3.png", width = 480, height = 480)
dev.off()
source('~/Documents/johnhopkins/exploratorydatacoursera/plot3.R')
